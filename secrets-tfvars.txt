# root/secrets.tfvars 
gcp_project = "your-gcp-project"
gcp_region = "us-east1"
aws_region = "us-east-1"



##### GCP VARIABLES #####

## GCP Module 1 - VPC, Private Subnet 

# 1. GCP - Create a VPC network on Google Cloud
gcp_vpc_vpn_name        = "gcp-vpc-vpn"
auto_create_subnetworks = false
gcp_vpc_vpn_routing     = "GLOBAL"

# 2. GCP - Create a private subnet within the VPC
gcp_vpc_vpn_private_subn_name          = "gcp-vpc-vpn-private-subn"
gcp_vpc_vpn_private_subn_region        = "us-east1"
gcp_vpc_vpn_private_subn_ip_cidr_range = "10.10.0.0/16"



## GCP Module 2 - 3 Firewalls

# 3. GCP - Create VM firewall to allow ssh
allow_ssh_iap_name          = "allow-ssh-iap"
allow_ssh_iap_protocol      = "tcp"
allow_ssh_iap_ports         = "22"
allow_ssh_iap_source_ranges = "35.235.240.0/20"
allow_ssh_iap_target_tags   = "my-gcp-vm-tag"

# 3.1 GCP - Create VPC firewall to allow ingress from AWS
allow_ingress_from_aws_name          = "allow-ingress-from-aws"
allow_ingress_from_aws_direction     = "INGRESS"
allow_ingress_from_aws_protocol_1    = "tcp"
allow_ingress_from_aws_ports         = "22"
allow_ingress_from_aws_protocol_2    = "icmp"
allow_ingress_from_aws_source_ranges = "10.20.0.0/16"
allow_ingress_from_target_tags       = "my-gcp-vm-tag"

# 3.2 GCP - Create VPC firewall to allow egress to AWS
allow_egress_to_aws_name        = "allow-egress-to-aws"
allow_egress_to_aws_direction   = "EGRESS"
allow_egress_to_aws_protocol    = "all"
allow_egress_to_aws_dest_ranges = "10.20.0.0/16"
allow_egress_to_aws_target_tags = "my-gcp-vm-tag"



## GCP Module 3 - VM Instance in Private Subnet

# 4. GCP - Create VM in GCP in private subnet
gcp_test_vm_name         = "gcp-test-vm"
gcp_test_vm_machine_type = "e2-micro"
gcp_test_vm_zone         = "us-east1-b"
gcp_test_vm_image        = "debian-cloud/debian-11"
gcp_test_vm_my_label     = "gcp-test-vm"
# gcp_test_vm_sa_email     = "enter service account email here"
gcp_test_vm_tags         = "my-gcp-vm-tag"



## GCP Module 4 - HA VPN, Cloud Router

# 5. GCP - Create a HA VPN gateway
gcp_vpn_ha_gateway_name   = "gcp-vpn-ha-gateway"
gcp_vpn_ha_gateway_region = "us-east1"

# 6. GCP - Create a Cloud Router for dynamic routing
gcp_vpc_vpn_router_1_name      = "gcp-vpc-vpn-router-1"
gcp_vpc_vpn_router_1_region    = "us-east1"
gcp_vpc_vpn_router_1_asn       = "64545"
gcp_vpc_vpn_router_1_adv_mode  = "CUSTOM"
gcp_vpc_vpn_router_1_adv_group = "ALL_SUBNETS"

# 7. GCP - Create External VPN Gateway
gcp_external_vpn_gw_name            = "gcp-external-vpn-gateway"
gcp_external_vpn_gw_desc            = "External VPN gateway for GCP to AWS connection"
gcp_external_vpn_gw_redundancy_type = "FOUR_IPS_REDUNDANCY"

# 8. GCP - Create 4 VPN tunnels to connect to AWS
gcp_vpc_vpn_tunnel_region      = "us-east1"
gcp_vpc_vpn_tunnel_ike_version = "2"

# 8.1 GCP - Create GCP VPN tunnel 1
gcp_vpc_vpn_tunnel_1_name        = "gcp-vpc-vpn-tunnel-1"
gcp_vpc_vpn_tunnel_1_peer_gw_int = "0"
gcp_vpc_vpn_tunnel_1_vpn_gw_int  = "0"

# 8.2 GCP - Create GCP VPN tunnel 2
gcp_vpc_vpn_tunnel_2_name        = "gcp-vpc-vpn-tunnel-2"
gcp_vpc_vpn_tunnel_2_peer_gw_int = "1"
gcp_vpc_vpn_tunnel_2_vpn_gw_int  = "0"

# 8.3 GCP - Create GCP VPN tunnel 3
gcp_vpc_vpn_tunnel_3_name        = "gcp-vpc-vpn-tunnel-3"
gcp_vpc_vpn_tunnel_3_peer_gw_int = "2"
gcp_vpc_vpn_tunnel_3_vpn_gw_int  = "1"

# 8.4 GCP - Create GCP VPN tunnel 4
gcp_vpc_vpn_tunnel_4_name        = "gcp-vpc-vpn-tunnel-4"
gcp_vpc_vpn_tunnel_4_peer_gw_int = "3"
gcp_vpc_vpn_tunnel_4_vpn_gw_int  = "1"

# 9. GCP - Create 4 Compute Router Interfaces 
gcp_router_int_region = "us-east1"

# 9.1 GCP - Create 4 Compute Router Interfaces 
gcp_router_int_1_name = "gcp-router-int-1"
# AWS vpn_connection_0_tunnel1_inside_cidr = "169.254.26.177/30"
gcp_router_int_1_ip_range = "169.254.26.178/30"

# 9.2 GCP - Create 4 Compute Router Interfaces 
gcp_router_int_2_name = "gcp-router-int-2"
# AWS vpn_connection_0_tunnel2_inside_cidr = "169.254.83.225/30"
gcp_router_int_2_ip_range = "169.254.83.226/30"

# 9.3 GCP - Create 4 Compute Router Interfaces 
gcp_router_int_3_name = "gcp-router-int-3"
# AWS vpn_connection_1_tunnel1_inside_cidr = "169.254.120.21/30"
gcp_router_int_3_ip_range = "169.254.120.22/30"

# 9.4 GCP - Create 4 Compute Router Interfaces 
gcp_router_int_4_name = "gcp-router-int-4"
# AWS vpn_connection_1_tunnel2_inside_cidr = "169.254.125.5/30"
gcp_router_int_4_ip_range = "169.254.125.6/30"

## 10. GCP - Create 4 BGP Peers
bgp_peer_region = "us-east1"

# 10.1 GCP - Create BGP Peer 1
bgp_peer_1_peer_name    = "bgp-peer-1"
bgp_peer_1_peer_ip_addr = "169.254.26.177"

# 10.2 GCP - Create BGP Peer 2
bgp_peer_2_peer_name    = "bgp-peer-2"
bgp_peer_2_peer_ip_addr = "169.254.83.225"

# 10.3 GCP - Create BGP Peer 3
bgp_peer_3_peer_name    = "bgp-peer-3"
bgp_peer_3_peer_ip_addr = "169.254.120.21"

# 10.4 GCP - Create BGP Peer 4
bgp_peer_4_peer_name    = "bgp-peer-4"
bgp_peer_4_peer_ip_addr = "169.254.125.5"





##### AWS VARIABLES #####

## AWS Module 1 - VPC, Private & Subnet, IGW, RTs ##

# 1. AWS - Create a VPC network on AWS
aws_vpc_vpn_cidr_block = "10.20.0.0/16"
aws_vpc_vpn_tags       = "aws-vpc-vpn"

# 2. AWS - Create a Private Subnet in VPC
aws_vpc_vpn_private_subn_cidr_block = "10.20.1.0/24"
aws_vpc_vpn_private_subn_avail_zone = "us-east-1b"
aws_vpc_vpn_private_subn_tags       = "aws-private-subnet"

# 3. AWS - Create a Public Subnet in VPC
aws_vpc_vpn_public_subn_cidr_block = "10.20.2.0/24"
aws_vpc_vpn_public_subn_tags       = "aws-public-subnet"

# 4. AWS - Create Internet Gateway for Public Subnet
public_igw_tags = "PublicInternetGateway"

# 6. AWS - Create Route Table for Public Subnet
aws_vpc_public_subn_rt_cidr = "0.0.0.0/0"
aws_vpc_public_subn_rt_name = "PublicRouteTable"




## AWS Module 2 - Private EC2 Instance w/ Security Group ##

# 1. AWS - Get data for AWS ec2 instance
ubuntu_most_recent = true
ubuntu_value = "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"

# 2. AWS - Create AWS ec2 instance
aws_test_vm_instance_type  = "t3.micro"
aws_test_vm_avail_zone     = "us-east-1b"
aws_test_vm_assc_public_ip = false
aws_test_vm_tags           = "aws-test-vm"
aws_test_vm_key_name       = "aws-ec2-test"

# 3. AWS - Create AWS SG for Private EC2 to to GCP for testing
allow_gcp_vpc_name = "allow-gcp-vpc"
allow_gcp_vpc_desc = "Allow traffic from and to GCP VPC"
allow_gcp_vpc_tags = "allow-gcp-vpc"
 
# 3.1 AWS - Create INGRESS Rules for Private EC2 to allow SSH
allow_gcp_vpc_ssh_cidr = "0.0.0.0/0" 
allow_gcp_vpc_ssh_from_port = 22
allow_gcp_vpc_ssh_protocol = "tcp"
allow_gcp_vpc_ssh_to_port = 22

# 3.2 AWS - Create INGRESS Rules for Private EC2 to allow all traffic from GCP
allow_gcp_vpc_gcp_all_protocol = "-1"

# 3.3 AWS - Create EGRESS Rules for AWS SG for Private EC2 to to GCP for testing
allow_gcp_vpc_egress_protocol = "-1"




## AWS Module 3 - Bastion Host in Public Subnet w/ Security Group


# 1. AWS - Create a bastion host ec2 in the Public Subnet
aws_bastion_ami      = "ami-079db87dc4c10ac91"
aws_bastion_type     = "t2.micro"
aws_bastion_key_name = "aws-ec2-test"
aws_bastion_tags     = "AWSBastionHost"

# 2. AWS - Create SG for Bastion
bastion_sg_name = "bastion-sg"
bastion_sg_desc = "Allow Bastion to ec2, within VPC, and egress all"
bastion_sg_tags = "AWSBastionSG"

# 2.1 AWS - Create INGRESS Rules for Bastion Host for SSH
allow_bastion_ssh_cidr      = "0.0.0.0/0"
allow_bastion_ssh_from_port = 22
allow_bastion_ssh_protocol  = "tcp"
allow_bastion_ssh_to_port   = 22

# 2.2 AWS - Create INGRESS Rules for Bastion Host for all traffic in VPC
allow_bastion_vpc_protocol = "-1"

# 2.3 AWS - Create EGRESS Rules for Bastion Host for all outbound traffic
allow_bastion_egress_cidr     = "0.0.0.0/0"
allow_bastion_egress_protocol = "-1"



## AWS Module 4 - VPN Gateway, Customer GWs, VPN Connection

# 1. AWS - Create VPN Gateway
aws_vpn_gw_tags            = "aws-vpn-gw"
aws_vpn_gw_amazon_side_asn = "65000"

# 2. AWS - Create 2 customer gateways on AWS
customer_gateway_type  = "ipsec.1"
customer_gateway_0_tag = "Interface 0 from GCP HA VPN"
customer_gateway_1_tag = "Interface 1 from GCP HA VPN"

# 3. AWS - Create VPN connections with dynamic routing
# to the GCP customer gateways
vpn_connection_type               = "ipsec.1"
vpn_connection_0_t1_inside_cidr   = "169.254.26.176/30"
vpn_connection_0_t1_preshared_key = "a1b2c3d4e5f6g7h8"
vpn_connection_0_t2_inside_cidr   = "169.254.83.224/30"
vpn_connection_0_t2_preshared_key = "i9j0k1l2m3n4o5p6"
vpn_connection_1_t1_inside_cidr   = "169.254.120.20/30"
vpn_connection_1_t1_preshared_key = "q7r8s9t0u1v2w3x4"
vpn_connection_1_t2_inside_cidr   = "169.254.125.4/30"
vpn_connection_1_t2_preshared_key = "y5z6a7b8c9d0e1f2"